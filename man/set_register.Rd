% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/set_register.R, R/spy.R
\name{set_register}
\alias{set_register}
\alias{unset_register}
\alias{ring_register}
\alias{ring_register_1}
\alias{ring_register_2}
\alias{ring_register_3}
\alias{ring_register_4}
\alias{ring_register_5}
\alias{ring_register_6}
\alias{ring_register_7}
\alias{ring_register_8}
\alias{ring_register_9}
\alias{ring_register_dot}
\alias{ring_register_dot_dot}
\alias{set_register_1_highlighted}
\alias{set_register_2_highlighted}
\alias{set_register_3_highlighted}
\alias{set_register_4_highlighted}
\alias{set_register_5_highlighted}
\alias{set_register_6_highlighted}
\alias{set_register_7_highlighted}
\alias{set_register_8_highlighted}
\alias{set_register_9_highlighted}
\alias{ring_register_1_on_highlighted}
\alias{ring_register_2_on_highlighted}
\alias{ring_register_3_on_highlighted}
\alias{ring_register_4_on_highlighted}
\alias{ring_register_5_on_highlighted}
\alias{ring_register_6_on_highlighted}
\alias{ring_register_7_on_highlighted}
\alias{ring_register_8_on_highlighted}
\alias{ring_register_9_on_highlighted}
\alias{ring_register_dot_on_highlighted}
\alias{ring_register_dot_dot_on_highlighted}
\alias{spy}
\alias{spy_highlighted}
\title{Registers}
\usage{
unset_register(key)

set_register(
  x,
  key,
  clobber = get_registers_option("clobber"),
  envir = parent.frame(),
  reserved_key_bypass = FALSE
)

ring_register(key)

ring_register_1()

ring_register_2()

ring_register_3()

ring_register_4()

ring_register_5()

ring_register_6()

ring_register_7()

ring_register_8()

ring_register_9()

ring_register_dot()

ring_register_dot_dot()

set_register_1_highlighted()

set_register_2_highlighted()

set_register_3_highlighted()

set_register_4_highlighted()

set_register_5_highlighted()

set_register_6_highlighted()

set_register_7_highlighted()

set_register_8_highlighted()

set_register_9_highlighted()

ring_register_1_on_highlighted()

ring_register_2_on_highlighted()

ring_register_3_on_highlighted()

ring_register_4_on_highlighted()

ring_register_5_on_highlighted()

ring_register_6_on_highlighted()

ring_register_7_on_highlighted()

ring_register_8_on_highlighted()

ring_register_9_on_highlighted()

ring_register_dot_on_highlighted()

ring_register_dot_dot_on_highlighted()

spy(data, name = deparse(substitute(data)))

spy_highlighted()
}
\arguments{
\item{key}{Register name, a character}

\item{x}{Expression to store in register}

\item{clobber}{Should the current value of the register be overwritten?
Defaults to \code{get_registers_option("clobber")}, which defaults to \code{TRUEi}.}

\item{envir}{Environment in which to evaluate the expression, defaults to
\code{parent.frame()}.}

\item{reserved_key_bypass}{Used internally to override setting invalid keys.}

\item{data}{A dataset (or expression that returns one)}

\item{name}{The binding name to focus on, as a string}
}
\value{
Invisible \code{NULL}

Invisible \code{NULL}
}
\description{
Set registers and register actions

Spy
}
\details{
In Vim-speak, \code{focus} is the unnamed register.
}
\examples{

# registers has a built in generic (function) called spy() that
# helps summarize objects succinctly. it's a lot like dplyr::glimpse()
spy(cars)


# a register is a kind of placeholder for a chunk of R code, usually
# a chunk of R code that you like to run a lot.
# right now, you don't have any registers set
registers()


# you set registers with set_register()
set_register(spy(cars), "f")
registers()


# ring_register() evaluates the chunk of code you've registered on demand
ring_register("f")


# there's an addin to ring_register().
# in RStudio, go to Tools > Modify Keyboard Shortcuts...
# in the box type "ring", and change the shortcut of Ring register
# to Cmd-R and click Apply. now push Cmd-R, type "f", and enter.


# unset_register() clears registers
unset_register("f")
registers()


# with this you can compose registers
set_register(cars, "d")
set_register(spy(), "g")
registers()
ring_register("dg")
ring_register("dg 3")


# registers are R code you want to make hotkeyable.
# the code is mainly of interested for its side effects:
# the output will only be printed if there's an explicit call to something
# that prints to the screen, like print() or spy()
# values are invisibly returned to nowhere, and thus unbindable*


# registers 1-9 are hotkeyable via RStudio's addin feature.
# you can set them in either of two ways.
# way 1:
set_register(spy(mtcars), "1")
registers()
ring_register("1")
# way 2 is to map set_register_1() to a hotkey.
# i recommend setting Store highlighted to register 1 to Alt-Cmd-1
# then highlight the next line and press the hotkey
spy(mtcars)


# like storing code into numbered registers,
# ringing numbered registers is hotkeyable, too
# these are hotkeyed as Ring register 1 (2, 3, ...)
# i recommend setting these to Cmd-1, Cmd-2, and so on
# try ringing the register 1 you set above.



# sometimes you have code in a register that you want to operate as an
# action, like the spy() and cars example above. spy() is code that
# is an action you want to run against cars. we're still thinking about
# the cleanest way to implement this, but for the time being you can
# just store each piece to a register, and then set ring_register() to
# a numbered action for example:
reset_registers()
set_register(cars, "d")
set_register(spy(), "g")
set_register(ring_register("dg"), "1")
ring_register("1")



# one common workflow is to want to run a registers action on a highlighted
# object. currently, to do this you'd need to save the highlighted code
# to a register, bind a composite ring_register() to a register, and then
# ring that register. that requires typing, but the whole point is to move
# away from typing.
# to get around this, have the ring_register_#_on_highlighted() functions
# that can be hotkeyed. i recommend setting Ring register 1 on highlighted
# to Shift-Cmd-1 and so on.
# (note: on a mac, you can change built-in OS bindings in System Preferences
#        > Keyboard > Shortcuts)
set_register(spy(), "1")

print_lm <- function(df) print(summary(lm(dist ~ speed, data = df)))
set_register(print_lm(), "2")

plot_sample <- function(df) with(df[sample(nrow(df),5),], plot(speed, dist))
set_register(plot_sample(), "3")

cars # highlight this and Shift-Cmd-1, Shift-Cmd-2, Shift-Cmd-3

# the highlighted text is stored to the 0 register
ring_register("01")

# note: with ggplot2 graphics, you'll need to wrap the graphic in print()
# since ggplot() returns an object that renders when printed


# interesting use case: generate a random subsample (that has a desired property)
# and save it. highlight the whole next line and Shift-Cmd-H
(cars_sample <- cars[sample(nrow(cars), 5),])
cars_sample





spy(cars)

# Shift-Cmd-H
cars

}
